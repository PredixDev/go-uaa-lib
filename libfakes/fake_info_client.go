// This file was generated by counterfeiter
package libfakes

import (
	"sync"

	"github.com/PredixDev/go-uaa-lib"
)

type FakeInfoClient struct {
	ServerStub        func() error
	serverMutex       sync.RWMutex
	serverArgsForCall []struct{}
	serverReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInfoClient) Server() error {
	fake.serverMutex.Lock()
	fake.serverArgsForCall = append(fake.serverArgsForCall, struct{}{})
	fake.recordInvocation("Server", []interface{}{})
	fake.serverMutex.Unlock()
	if fake.ServerStub != nil {
		return fake.ServerStub()
	} else {
		return fake.serverReturns.result1
	}
}

func (fake *FakeInfoClient) ServerCallCount() int {
	fake.serverMutex.RLock()
	defer fake.serverMutex.RUnlock()
	return len(fake.serverArgsForCall)
}

func (fake *FakeInfoClient) ServerReturns(result1 error) {
	fake.ServerStub = nil
	fake.serverReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeInfoClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.serverMutex.RLock()
	defer fake.serverMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeInfoClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ lib.InfoClient = new(FakeInfoClient)
